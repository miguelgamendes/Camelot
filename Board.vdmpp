class Board
/*
	Data structure that contains the entire game board
*/
	instance variables
		private board : seq of seq of char := [];
		
	operations
		public init : () ==> ()
		init() == (
			dcl auxLine : seq of char := [];
			for counter = 0 to 11 do (
				auxLine := auxLine ^ [' ']
			);
			for counter = 0 to 15 do (
				board := board ^ [auxLine]
			);
		);
		
		public changeElement : int * int * char ==> ()
		changeElement(x, y, newElem) == (
			dcl auxBoard : seq of seq of char := [];
			dcl auxPreBoard : seq of seq of char := [];
			dcl auxPostBoard : seq of seq of char := board;
			dcl auxLine : seq of char := [];
			dcl auxPreLine : seq of char := [];
			dcl auxPostLine : seq of char := [];
			
			-- find Y
			for counter = 0 to y do (
				if counter <> 0 then
					auxPreBoard := auxPreBoard ^ [hd auxBoard];
				auxBoard := [hd auxPostBoard];
				auxPostBoard := tl auxPostBoard;
			);
			
			-- find X
			auxPostLine := hd auxBoard;
			for counter = 0 to x do (
				if counter <> 0 then
					auxPreLine := auxPreLine ^ [hd auxLine];
				auxLine := [hd auxPostLine];
				auxPostLine := tl auxPostLine;
			);
			
			-- rebuild line, with new element
			auxLine := auxPreLine ^ [newElem];
			auxLine := auxLine ^ auxPostLine;
			
			--rebuild board, with new line
			auxBoard := auxPreBoard ^ [auxLine];
			auxBoard := auxBoard ^ auxPostBoard;
			
			board := auxBoard;
		);

end Board