/*

              .
             /.\
             |.|
             |.|
             |.|
             |.|   ,'`.
             |.|  ;\  /:
             |.| /  \/  \
             |.|<.<_\/_>,>
             |.| \`.::,'/
             |.|,'.'||'/.
          ,-'|.|.`.____,'`.
        ,' .`|.| `.____,;/ \
       ,'=-.`|.|\ .   \ |,':
      /_   :)|.|.`.___:,:,'|.
     (  `-:;\|.|.`.)  |.`-':,\
     /.   /  ;.:--'   |    | ,`.
    / _>-'._.'-'.     |.   |' / )._
   :.'    ((.__;/     |    |._ /__ `.___
   `.>._.-' |)=(      |.   ;  '--.._,`-.`.
            ',--'`-._ | _,:          `='`'
            /_`-. `..`:'/_.\
           :__``--..\\_/_..:
           |  ``--..,:;\__.|
           |`--..__/:;  :__|
           `._____:-;_,':__;
            |:'    /::'  `|
            |,---.:  :,-'`;
            : __  )  ;__,'\
            \' ,`/   \__  :
            :. |,:   :  `./
            | `| |   |   |:
            |  | |   |   ||
            |  | |   |   ||
            |  | |   '   ||
            |  : |    \  ||
            |  ; :    :  ||
            | / ,;    |\,'`.
            ;-.(,'    '-._,-`.
          ,'-.//          `--'
          `---'
*/

class Board
/*
	Data structure that contains the entire game board
	
	k - white knight
	p - white pawn
	
	K - black knight
	P - black pawn
*/
	instance variables
		private board : seq of seq of char := [];
		
	values
		X = 11;
		Y = 15;
		
	operations
		public Board : () ==> Board
		Board() == (
			dcl auxLine : seq of char := [];
			
			board := [];
			
			for counter = 0 to Y do (
				for counter2 = 0 to X do (
					-- corner cases
					if counter + counter2 <= 2 then
						auxLine := auxLine ^ ['#'];
					if counter2 - counter >= 9 then
						auxLine := auxLine ^ ['#'];
					if counter - counter2 >= 13 then
						auxLine := auxLine ^ ['#'];
					if counter + counter2 >= 24 then
						auxLine := auxLine ^ ['#'];
						
					-- additional cases
					if counter = 0 and (counter2 = 3 or counter2 = 4 or counter2 = 7 or counter2 = 8) then
						auxLine := auxLine ^ ['#'];
					if counter = Y and (counter2 = 3 or counter2 = 4 or counter2 = 7 or counter2 = 8) then
						auxLine := auxLine ^ ['#'];
					
					if len auxLine = counter2 then
						auxLine := auxLine ^ [' '];
				);
				board := board ^ [auxLine];
				auxLine := []; -- reset auxLine for next iteration
			);
			
			-- piece placement
			
			-- black pieces
			
			changeElement(2,5,'K');
			changeElement(3,5,'P');
			changeElement(4,5,'P');
			changeElement(5,5,'P');
			changeElement(6,5,'P');
			changeElement(7,5,'P');
			changeElement(8,5,'P');
			changeElement(9,5,'K');
			
			changeElement(3,6,'K');
			changeElement(4,6,'P');
			changeElement(5,6,'P');
			changeElement(6,6,'P');
			changeElement(7,6,'P');
			changeElement(8,6,'K');
			
			changeElement(3,9,'k');
			changeElement(4,9,'p');
			changeElement(5,9,'p');
			changeElement(6,9,'p');
			changeElement(7,9,'p');
			changeElement(8,9,'k');
			
			changeElement(2,10,'k');
			changeElement(3,10,'p');
			changeElement(4,10,'p');
			changeElement(5,10,'p');
			changeElement(6,10,'p');
			changeElement(7,10,'p');
			changeElement(8,10,'p');
			changeElement(9,10,'k');
		);
		
		public print : () ==> ()
		print() == (
			dcl auxBoard : seq of seq of char := board;
			dcl auxLine : seq of char := [];
			
			IO`print("\n"); -- this is necessary for proper console output
			for counter = 0 to Y do (
				auxLine := hd auxBoard;
				auxBoard := tl auxBoard;
				IO`print(auxLine);
				IO`print("\n");
			)
		);
		
		public changeElement : int * int * char ==> ()
		changeElement(x, y, newElem) == (
			dcl auxBoard : seq of seq of char := [];
			dcl auxPreBoard : seq of seq of char := [];
			dcl auxPostBoard : seq of seq of char := board;
			dcl auxLine : seq of char := [];
			dcl auxPreLine : seq of char := [];
			dcl auxPostLine : seq of char := [];
			
			-- find Y
			for counter = 0 to y do (
				if counter <> 0 then
					auxPreBoard := auxPreBoard ^ [hd auxBoard];
				auxBoard := [hd auxPostBoard];
				auxPostBoard := tl auxPostBoard;
			);
			
			-- find X
			auxPostLine := hd auxBoard;
			for counter = 0 to x do (
				if counter <> 0 then
					auxPreLine := auxPreLine ^ [hd auxLine];
				auxLine := [hd auxPostLine];
				auxPostLine := tl auxPostLine;
			);
			
			-- rebuild line, with new element
			auxLine := auxPreLine ^ [newElem];
			auxLine := auxLine ^ auxPostLine;
			
			--rebuild board, with new line
			auxBoard := auxPreBoard ^ [auxLine];
			auxBoard := auxBoard ^ auxPostBoard;
			
			board := auxBoard;
		);
		
		public getElement : int * int ==> char
		getElement(x, y) == (
			dcl finalElem : char;
			dcl auxLine : seq of char := [];
			dcl auxBoard : seq of seq of char := board;
		
			for counter = 0 to y do (
				auxLine := hd auxBoard;
				auxBoard := tl auxBoard;
			);
			
			for counter = 0 to x do (
				finalElem := hd auxLine;
				auxLine := tl auxLine;
			);
			
			return finalElem;
		);

end Board